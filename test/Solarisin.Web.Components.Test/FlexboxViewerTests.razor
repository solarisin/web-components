@using MudBlazor
@using Xunit.Abstractions
@code
{
    private readonly ITestOutputHelper _output;
    
    public FlexboxViewerTests(ITestOutputHelper output)
    {
        _output = output;
    }
    
    [Fact]
    public void TestMudBlazor()
    {
        using var ctx = new TestContext();
        
        MudTheme theme = new MudTheme();

        var cut = ctx.RenderComponent<FlexboxViewer>(parameters => parameters
            .Add(p => p.Theme, theme)
            .Add(p => p.Structure, StructureMethod.MudBlazor)
            );
        
        var flexBox = cut.Instance;
        Assert.Equal(StructureMethod.MudBlazor, flexBox.Structure);
        _output.WriteLine("TestMudBlazor structure name: {0}", flexBox.Structure.ToString());
        
        Assert.Equal(theme, flexBox.Theme);
        
        var cards = cut.FindComponents<MudCard>();
        Assert.Equal(12, cards.Count);
    }

    [Fact]
    public void TestHtml()
    {
        using var ctx = new TestContext();
        
        MudTheme theme = new MudTheme();

        var cut = ctx.RenderComponent<FlexboxViewer>(parameters => parameters
            .Add(p => p.Theme, theme)
            .Add(p => p.Structure, StructureMethod.Html)
            );

        var flexBox = cut.Instance;
        Assert.Equal(StructureMethod.Html, flexBox.Structure);
        _output.WriteLine("TestHtml structure name: {0}", flexBox.Structure.ToString());
        
        Assert.Equal(theme, flexBox.Theme);
        
        var items = cut.FindAll("#item");
        Assert.Equal(13, items.Count);
    }
}